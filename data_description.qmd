---
title: "Data Description Example"
---

Gather data:

```{python}
from datavolley import read_dv
import pandas as pd
import urllib.request
datavolleyfile="&stuttgart-schwerin-2018.dvw"
url_source_file = "https://raw.githubusercontent.com/openvolley/ovva/master/inst/extdata/demo/%26stuttgart-schwerin-2018.dvw"
source = urllib.request.urlopen(url_source_file).read().decode('UTF-8')
# Scrittura dei dati in un file locale
with open(datavolleyfile, 'w') as file:
    file.write(source)
```

Read data:

```{python}
# change this if you have your file
datavolleyfile="&stuttgart-schwerin-2018.dvw"
# Reading the file
dvf = read_dv.DataVolley(datavolleyfile)
# extract all the actions
plays = dvf.get_plays()
```

Evaluate match data:

```{python}
championship = dvf.match_info.championship.values[0]
print(championship)
match_day = dvf.match_info.day.values[0]
print(match_day)
match_time = dvf.match_info.time.values[0]
print(match_time)
match_season = dvf.match_info.season.values[0]
print(match_season)
```

```{python}
total_minutes = dvf.sets_info.duration.sum()
print(total_minutes)
hours = total_minutes // 60
print(hours)
minutes = total_minutes % 60
print(minutes)
```

```{python}
string_sets = ""
duraton_sets = ""
for idx, row in dvf.sets_info.iterrows():
   string_sets += "(" + str(row["home4"]) + "-" + str(row["visitor4"]) + ") "
   duraton_sets += str(row["duration"]) + "',"
duration_sets = duraton_sets.rstrip(",")
print(string_sets)
print(duration_sets)
```

Putting it all together:

```{python}
print("""
%s - %s
%s
%s - %s 
%s-%s %s
duration: %s:%sh (%s)
""" % (match_day, match_time, championship, dvf.home_team, 
       dvf.visiting_team, dvf.home_setswon, dvf.visiting_setswon,
       string_sets,str(hours).zfill(2), str(minutes).zfill(2), duration_sets))
```

```{python}
print(dvf.home_team)
print("name\tname")
players = dvf.players_home
players['player_number'] = pd.to_numeric(players['player_number'], errors='coerce')
players = players.sort_values("player_number")
plays = dvf.get_plays()
for idx, row in players.iterrows():
    player_number = row["player_number"]
    player_name = row['player_name'].rstrip()
    player_id = row['player_id']
    points = plays[(plays.player_id == player_id) & plays.skill.isin(['Attack', 'Serve','Block']) & (plays.evaluation_code == "#")].shape[0]
    errors = plays[(plays.player_id == player_id) & plays.skill.isin(['Attack', 'Reception','Dig','Set','Block']) & (plays.evaluation_code == "=")].shape[0]
    print("""%s\t%s (%i,%i)""" % (player_number,player_name, points, errors))
print("coaches")
print(" " + dvf.home_coaches[0])
print(" " + dvf.home_coaches[1])
print("\nin parentheses: number of points, number of errors")
```

Print home coaches:

```{python}
print(dvf.home_coaches[0])
```

```{python}
print(dvf.visiting_team)
print("name\tname")
players = dvf.players_visiting
players['player_number'] = pd.to_numeric(players['player_number'], errors='coerce')
players = players.sort_values("player_number")
plays = dvf.get_plays()
for idx, row in players.iterrows():
    player_number = row["player_number"]
    player_name = row['player_name'].rstrip()
    player_id = row['player_id']
    points = plays[(plays.player_id == player_id) & plays.skill.isin(['Attack', 'Serve','Block']) & (plays.evaluation_code == "#")].shape[0]
    errors = plays[(plays.player_id == player_id) & plays.skill.isin(['Attack', 'Reception','Dig','Set','Block']) & (plays.evaluation_code == "=")].shape[0]
    print("""%s\t%s (%i,%i)""" % (player_number,player_name, points, errors))
print("coaches")
print(" " + dvf.visiting_coaches[0])
print(" " + dvf.visiting_coaches[1])
print("\nin parentheses: number of points, number of errors")
```